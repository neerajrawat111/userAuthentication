{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-21T04:22:32.455Z",
    "end": "2024-11-21T04:22:32.918Z",
    "duration": 463,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3c75f486-93a5-4269-bdc0-3cc658b350a1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7ec368f1-487b-4a72-8b3d-b827aad97493",
          "title": "SignUp Tests",
          "fullFile": "/Users/newtonschool/Downloads/Auth/Authentication 2/__tests__/test.js",
          "file": "/__tests__/test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SignUp Tests\"",
              "fullTitle": "SignUp Tests \"before each\" hook in \"SignUp Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.user.deleteMany();",
              "err": {},
              "uuid": "1045c0e5-c366-4034-b976-45022408fdc7",
              "parentUUID": "7ec368f1-487b-4a72-8b3d-b827aad97493",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create account for a given user",
              "fullTitle": "SignUp Tests should create account for a given user",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: 'logan',\n  email: 'logan12@gmail.com',\n  password: 'logan1234',\n};\n// Send request to create a new user\nconst res = await chai.request(app).post('/api/auth/signup').send(newUser);\nexpect(res).to.have.status(201);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('userId');\n// Verify user in the database\nconst userInDb = await prisma.user.findUnique({\n  where: { id: res.body.userId },\n});\nexpect(userInDb).to.exist;\nexpect(userInDb.email).to.equal(newUser.email);\n// Check if password is hashed correctly\nconst isPasswordValid = await bcrypt.compare(newUser.password, userInDb.password);\nexpect(isPasswordValid).to.be.true;",
              "err": {},
              "uuid": "86a1308f-1770-4077-aeb9-3d598ff29bb0",
              "parentUUID": "7ec368f1-487b-4a72-8b3d-b827aad97493",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the email is already in use",
              "fullTitle": "SignUp Tests should return 400 if the email is already in use",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const existingUser = {\n  name: 'logan',\n  email: 'logan@gmail.com',\n  password: await bcrypt.hash('logan123', 10),\n};\nawait prisma.user.create({ data: existingUser });\nconst duplicateUser = {\n  name: 'logan',\n  email: 'logan@gmail.com', \n  password: 'logan123',\n};\nconst res = await chai.request(app).post('/api/auth/signup').send(duplicateUser);\nexpect(res).to.have.status(400);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error', 'Email already in use');",
              "err": {},
              "uuid": "65715760-9625-4ef7-9107-a06a3f5dd238",
              "parentUUID": "7ec368f1-487b-4a72-8b3d-b827aad97493",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86a1308f-1770-4077-aeb9-3d598ff29bb0",
            "65715760-9625-4ef7-9107-a06a3f5dd238"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 206,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "60490a94-7af5-49ff-b72f-87dbfa264291",
          "title": "Login Tests",
          "fullFile": "/Users/newtonschool/Downloads/Auth/Authentication 2/__tests__/test.js",
          "file": "/__tests__/test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Login Tests\"",
              "fullTitle": "Login Tests \"before each\" hook in \"Login Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.user.deleteMany();",
              "err": {},
              "uuid": "fbaf0d0a-cc45-4428-9ec1-06524e45aa52",
              "parentUUID": "60490a94-7af5-49ff-b72f-87dbfa264291",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log in successfully with valid credentials",
              "fullTitle": "Login Tests should log in successfully with valid credentials",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const existingUser = {\n      name: 'logan',\n      email: 'logan@gmail.com',\n      password: await bcrypt.hash('logan123', 10),\n    };\n    const createdUser= await prisma.user.create({ data: existingUser });\n    \n    const data = {\n      email: \"logan@gmail.com\",\n      password: \"logan123\"\n    };\n    \n    chai\n      .request(app)\n      .post('/api/auth/login')\n      .send(data)\n      .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('userdata');\n        expect(res.body.userdata).to.have.property('id');\n        expect(res.body.userdata).to.have.property('name');\n        expect(res.body.userdata).to.have.property('email');\n        expect(res.body).to.have.property('accesstoken');\n        const token = res.body.accesstoken;\n        try {\n          const decoded = jwt.verify(token, JWT_SECRET);\n          expect(decoded).to.be.an('object');\n          expect(decoded).to.have.property('userId', createdUser.id);\n        } catch (error) {\n          throw new Error(`Token verification failed: ${error.message}`);\n        }\n      });",
              "err": {},
              "uuid": "abe7a494-1ab7-4b0b-8fd3-f234f4ab2218",
              "parentUUID": "60490a94-7af5-49ff-b72f-87dbfa264291",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if email or password is missing",
              "fullTitle": "Login Tests should return 400 if email or password is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email: \"logan@gmail.com\" }) // Password is missing\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    expect(res.body).to.be.an('object');\n    expect(res.body).to.have.property('error', 'Email and password are required');\n  });",
              "err": {},
              "uuid": "0e513f24-908e-4d17-8ae1-31ebd2f11b7c",
              "parentUUID": "60490a94-7af5-49ff-b72f-87dbfa264291",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 if the password is incorrect",
              "fullTitle": "Login Tests should return 401 if the password is incorrect",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const existingUser = {\n  name: 'logan',\n  email: 'logan@gmail.com',\n  password: await bcrypt.hash('correctpassword', 10),\n};\nawait prisma.user.create({ data: existingUser });\n  \nconst invalidCredentials = {\n  email: 'logan@gmail.com',\n  password: 'wrongpassword', // Incorrect password\n};\n  \nconst res = await chai.request(app).post('/api/auth/login').send(invalidCredentials);\nexpect(res).to.have.status(401);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error', 'Invalid credentials');",
              "err": {},
              "uuid": "3e41ab97-eeeb-4fb9-96fb-641c8eb7ebfe",
              "parentUUID": "60490a94-7af5-49ff-b72f-87dbfa264291",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "abe7a494-1ab7-4b0b-8fd3-f234f4ab2218",
            "0e513f24-908e-4d17-8ae1-31ebd2f11b7c",
            "3e41ab97-eeeb-4fb9-96fb-641c8eb7ebfe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 175,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}