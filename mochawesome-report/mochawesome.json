{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-21T07:26:59.502Z",
    "end": "2024-11-21T07:26:59.973Z",
    "duration": 471,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "46d64bc2-6443-4587-a7f6-410487177546",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c0a7f640-1763-4bed-9502-51aac417efec",
          "title": "SignUp Tests",
          "fullFile": "/Users/newtonschool/Downloads/Auth/Authentication 2/__tests__/test.js",
          "file": "/__tests__/test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SignUp Tests\"",
              "fullTitle": "SignUp Tests \"before each\" hook in \"SignUp Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.user.deleteMany();",
              "err": {},
              "uuid": "e889661e-b5bb-4817-a294-2f5502b0295a",
              "parentUUID": "c0a7f640-1763-4bed-9502-51aac417efec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create account for a given user",
              "fullTitle": "SignUp Tests should create account for a given user",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: 'logan',\n  email: 'logan12@gmail.com',\n  password: 'logan1234',\n};\n// Send request to create a new user\nconst res = await chai.request(app).post('/api/auth/signup').send(newUser);\nexpect(res).to.have.status(201);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('userId');\n// Verify user in the database\nconst userInDb = await prisma.user.findUnique({\n  where: { id: res.body.userId },\n});\nexpect(userInDb).to.exist;\nexpect(userInDb.email).to.equal(newUser.email);\n// Check if password is hashed correctly\nconst isPasswordValid = await bcrypt.compare(newUser.password, userInDb.password);\nexpect(isPasswordValid).to.be.true;",
              "err": {},
              "uuid": "2e10bca5-3367-4c2c-aab6-f44c1acd0352",
              "parentUUID": "c0a7f640-1763-4bed-9502-51aac417efec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if email is missing",
              "fullTitle": "SignUp Tests should return 400 if email is missing",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userWithoutEmail = {\n  name: 'logan',\n  password: 'password123',\n};\n  \nconst res = await chai.request(app).post('/api/auth/signup').send(userWithoutEmail);\nexpect(res).to.have.status(400);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "9607bbde-2aca-4cb3-94f9-8eaf04353b58",
              "parentUUID": "c0a7f640-1763-4bed-9502-51aac417efec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if password is missing",
              "fullTitle": "SignUp Tests should return 400 if password is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userWithoutPassword = {\n  name: 'logan',\n  email: 'logan@gmail.com',\n};\n  \nconst res = await chai.request(app).post('/api/auth/signup').send(userWithoutPassword);\nexpect(res).to.have.status(400);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "7ab0b410-8ef9-4b27-a1dd-7675a9e53ba3",
              "parentUUID": "c0a7f640-1763-4bed-9502-51aac417efec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the email is already in use",
              "fullTitle": "SignUp Tests should return 400 if the email is already in use",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const existingUser = {\n  name: 'logan',\n  email: 'logan@gmail.com',\n  password: await bcrypt.hash('logan123', 10),\n};\nawait prisma.user.create({ data: existingUser });\nconst duplicateUser = {\n  name: 'logan',\n  email: 'logan@gmail.com', \n  password: 'logan123',\n};\nconst res = await chai.request(app).post('/api/auth/signup').send(duplicateUser);\nexpect(res).to.have.status(400);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error', 'Email already in use');",
              "err": {},
              "uuid": "35389410-fca9-4a2e-8a4c-ff8856e7a24f",
              "parentUUID": "c0a7f640-1763-4bed-9502-51aac417efec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e10bca5-3367-4c2c-aab6-f44c1acd0352",
            "9607bbde-2aca-4cb3-94f9-8eaf04353b58",
            "7ab0b410-8ef9-4b27-a1dd-7675a9e53ba3",
            "35389410-fca9-4a2e-8a4c-ff8856e7a24f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 208,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "7828c39d-ad30-4f3a-acf5-b59d0413fd1f",
          "title": "Login Tests",
          "fullFile": "/Users/newtonschool/Downloads/Auth/Authentication 2/__tests__/test.js",
          "file": "/__tests__/test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Login Tests\"",
              "fullTitle": "Login Tests \"before each\" hook in \"Login Tests\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.user.deleteMany();",
              "err": {},
              "uuid": "14dbab0e-ea22-4813-b183-ba918b2a5137",
              "parentUUID": "7828c39d-ad30-4f3a-acf5-b59d0413fd1f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log in successfully with valid credentials",
              "fullTitle": "Login Tests should log in successfully with valid credentials",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const existingUser = {\n      name: 'logan',\n      email: 'logan@gmail.com',\n      password: await bcrypt.hash('logan123', 10),\n    };\n    const createdUser= await prisma.user.create({ data: existingUser });\n    \n    const data = {\n      email: \"logan@gmail.com\",\n      password: \"logan123\"\n    };\n    \n    chai\n      .request(app)\n      .post('/api/auth/login')\n      .send(data)\n      .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('userdata');\n        expect(res.body.userdata).to.have.property('id');\n        expect(res.body.userdata).to.have.property('name');\n        expect(res.body.userdata).to.have.property('email');\n        expect(res.body).to.have.property('accesstoken');\n        const token = res.body.accesstoken;\n        try {\n          const decoded = jwt.verify(token, JWT_SECRET);\n          expect(decoded).to.be.an('object');\n          expect(decoded).to.have.property('userId', createdUser.id);\n        } catch (error) {\n          throw new Error(`Token verification failed: ${error.message}`);\n        }\n      });",
              "err": {},
              "uuid": "b7553a02-3229-44ec-9a55-bb596ea28a3d",
              "parentUUID": "7828c39d-ad30-4f3a-acf5-b59d0413fd1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if email or password is missing",
              "fullTitle": "Login Tests should return 400 if email or password is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login')\n  .send({ email: \"logan@gmail.com\" }) // Password is missing\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    expect(res.body).to.be.an('object');\n    expect(res.body).to.have.property('error', 'Email and password are required');\n  });",
              "err": {},
              "uuid": "5a3bc5ac-da10-4a21-a482-8a7c309b842e",
              "parentUUID": "7828c39d-ad30-4f3a-acf5-b59d0413fd1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 if the password is incorrect",
              "fullTitle": "Login Tests should return 401 if the password is incorrect",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const existingUser = {\n  name: 'logan',\n  email: 'logan@gmail.com',\n  password: await bcrypt.hash('correctpassword', 10),\n};\nawait prisma.user.create({ data: existingUser });\n  \nconst invalidCredentials = {\n  email: 'logan@gmail.com',\n  password: 'wrongpassword', // Incorrect password\n};\n  \nconst res = await chai.request(app).post('/api/auth/login').send(invalidCredentials);\nexpect(res).to.have.status(401);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('error', 'Invalid credentials');",
              "err": {},
              "uuid": "6b50c8cb-af65-4ea5-a141-e37f14eef4a5",
              "parentUUID": "7828c39d-ad30-4f3a-acf5-b59d0413fd1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if the user is not found",
              "fullTitle": "Login Tests should return 404 if the user is not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Data for a non-existing user\nconst nonExistingUser = {\n  email: 'nonexistentuser@gmail.com',\n  password: 'somepassword',\n};\n  \nchai\n  .request(app)\n  .post('/api/auth/login')\n  .send(nonExistingUser)\n  .end((err, res) => {\n    // Assert that the response status is 404 (User Not Found)\n    expect(res).to.have.status(404);\n    expect(res.body).to.be.an('object');\n    expect(res.body).to.have.property('error', 'User not found');\n  });",
              "err": {},
              "uuid": "9bb13ca9-a6b5-4ba8-af65-1628912fc3f7",
              "parentUUID": "7828c39d-ad30-4f3a-acf5-b59d0413fd1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7553a02-3229-44ec-9a55-bb596ea28a3d",
            "5a3bc5ac-da10-4a21-a482-8a7c309b842e",
            "6b50c8cb-af65-4ea5-a141-e37f14eef4a5",
            "9bb13ca9-a6b5-4ba8-af65-1628912fc3f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}